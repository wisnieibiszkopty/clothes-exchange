{"ast":null,"code":"var _class;\nimport { HttpParams } from \"@angular/common/http\";\nimport { tap, map, BehaviorSubject } from \"rxjs\";\nimport { environment } from \"../../../environments/environment.development\";\nimport * as i0 from \"@angular/core\";\nimport * as i1 from \"@angular/common/http\";\nexport class AuthService {\n  constructor(http) {\n    this.http = http;\n    // I'm not sure yet how to store that\n    this.loggedInSubject = new BehaviorSubject(false);\n    this.loggedIn$ = this.loggedInSubject.asObservable();\n    this.idSubject = new BehaviorSubject(0);\n    this.userId$ = this.idSubject.asObservable();\n  }\n  /*public get userId(){\n    return this._userId;\n  }*/\n  logout() {\n    this.loggedInSubject.next(false);\n  }\n  signUp(user) {\n    const url = environment.apiUrl + 'auth';\n    return this.http.post(url, user).pipe(tap(data => {\n      // add expiration date\n      const token = data.token;\n      sessionStorage.setItem(\"token\", token);\n    }), map(data => data.user));\n  }\n  signIn(user) {\n    const url = environment.apiUrl + 'auth';\n    const params = new HttpParams().set(\"email\", user.email).set(\"password\", user.password);\n    return this.http.get(url, {\n      params\n    }).pipe(tap(data => {\n      const token = data.token;\n      sessionStorage.setItem(\"token\", token);\n      this.idSubject.next(data.id);\n      this.loggedInSubject.next(true);\n    }), map(data => data.id));\n  }\n}\n_class = AuthService;\n_class.ɵfac = function AuthService_Factory(t) {\n  return new (t || _class)(i0.ɵɵinject(i1.HttpClient));\n};\n_class.ɵprov = /*@__PURE__*/i0.ɵɵdefineInjectable({\n  token: _class,\n  factory: _class.ɵfac,\n  providedIn: \"root\"\n});","map":{"version":3,"names":["HttpParams","tap","map","BehaviorSubject","environment","AuthService","constructor","http","loggedInSubject","loggedIn$","asObservable","idSubject","userId$","logout","next","signUp","user","url","apiUrl","post","pipe","data","token","sessionStorage","setItem","signIn","params","set","email","password","get","id","i0","ɵɵinject","i1","HttpClient","factory","ɵfac","providedIn"],"sources":["C:\\Users\\Kamil\\WebstormProjects\\clothes-exchange\\app\\src\\app\\shared\\services\\auth.service.ts"],"sourcesContent":["import { Injectable } from \"@angular/core\";\r\nimport { HttpClient, HttpParams } from \"@angular/common/http\";\r\nimport {tap, map, Observable, BehaviorSubject} from \"rxjs\";\r\n\r\nimport { environment} from \"../../../environments/environment.development\";\r\n\r\n// maybe would be better if it just returns id - done\r\ninterface data{\r\n  token: string;\r\n  user: {\r\n    name: string;\r\n    email: string;\r\n  }\r\n}\r\n\r\n@Injectable({providedIn: \"root\"})\r\nexport class AuthService{\r\n  // I'm not sure yet how to store that\r\n  private loggedInSubject: BehaviorSubject<boolean> = new BehaviorSubject<boolean>(false);\r\n  loggedIn$: Observable<boolean> = this.loggedInSubject.asObservable();\r\n  private idSubject: BehaviorSubject<number> = new BehaviorSubject<number>(0);\r\n  userId$: Observable<number> = this.idSubject.asObservable();\r\n\r\n  constructor(private http: HttpClient) {}\r\n\r\n  /*public get userId(){\r\n    return this._userId;\r\n  }*/\r\n\r\n  public logout(){\r\n    this.loggedInSubject.next(false);\r\n  }\r\n\r\n  signUp(user: {name: string, email: string, password: string}): Observable<{name: string, email: string}>{\r\n    const url = environment.apiUrl + 'auth';\r\n    return this.http.post(url, user).pipe(\r\n      tap((data: any) => {\r\n        // add expiration date\r\n        const token = data.token;\r\n        sessionStorage.setItem(\"token\", token);\r\n      }),\r\n      map((data: data) => data.user)\r\n    );\r\n  }\r\n\r\n  signIn(user: {email: string, password: string}): Observable<number>{\r\n    const url = environment.apiUrl + 'auth';\r\n    const params = new HttpParams()\r\n      .set(\"email\", user.email)\r\n      .set(\"password\", user.password);\r\n    return this.http.get(url, {params}).pipe(\r\n      tap((data: any) => {\r\n        const token = data.token;\r\n        sessionStorage.setItem(\"token\", token);\r\n        this.idSubject.next(data.id);\r\n        this.loggedInSubject.next(true);\r\n      }),\r\n      map((data) => data.id)\r\n    );\r\n  }\r\n\r\n}\r\n"],"mappings":";AACA,SAAqBA,UAAU,QAAQ,sBAAsB;AAC7D,SAAQC,GAAG,EAAEC,GAAG,EAAcC,eAAe,QAAO,MAAM;AAE1D,SAASC,WAAW,QAAO,+CAA+C;;;AAY1E,OAAM,MAAOC,WAAW;EAOtBC,YAAoBC,IAAgB;IAAhB,KAAAA,IAAI,GAAJA,IAAI;IANxB;IACQ,KAAAC,eAAe,GAA6B,IAAIL,eAAe,CAAU,KAAK,CAAC;IACvF,KAAAM,SAAS,GAAwB,IAAI,CAACD,eAAe,CAACE,YAAY,EAAE;IAC5D,KAAAC,SAAS,GAA4B,IAAIR,eAAe,CAAS,CAAC,CAAC;IAC3E,KAAAS,OAAO,GAAuB,IAAI,CAACD,SAAS,CAACD,YAAY,EAAE;EAEpB;EAEvC;;;EAIOG,MAAMA,CAAA;IACX,IAAI,CAACL,eAAe,CAACM,IAAI,CAAC,KAAK,CAAC;EAClC;EAEAC,MAAMA,CAACC,IAAqD;IAC1D,MAAMC,GAAG,GAAGb,WAAW,CAACc,MAAM,GAAG,MAAM;IACvC,OAAO,IAAI,CAACX,IAAI,CAACY,IAAI,CAACF,GAAG,EAAED,IAAI,CAAC,CAACI,IAAI,CACnCnB,GAAG,CAAEoB,IAAS,IAAI;MAChB;MACA,MAAMC,KAAK,GAAGD,IAAI,CAACC,KAAK;MACxBC,cAAc,CAACC,OAAO,CAAC,OAAO,EAAEF,KAAK,CAAC;IACxC,CAAC,CAAC,EACFpB,GAAG,CAAEmB,IAAU,IAAKA,IAAI,CAACL,IAAI,CAAC,CAC/B;EACH;EAEAS,MAAMA,CAACT,IAAuC;IAC5C,MAAMC,GAAG,GAAGb,WAAW,CAACc,MAAM,GAAG,MAAM;IACvC,MAAMQ,MAAM,GAAG,IAAI1B,UAAU,EAAE,CAC5B2B,GAAG,CAAC,OAAO,EAAEX,IAAI,CAACY,KAAK,CAAC,CACxBD,GAAG,CAAC,UAAU,EAAEX,IAAI,CAACa,QAAQ,CAAC;IACjC,OAAO,IAAI,CAACtB,IAAI,CAACuB,GAAG,CAACb,GAAG,EAAE;MAACS;IAAM,CAAC,CAAC,CAACN,IAAI,CACtCnB,GAAG,CAAEoB,IAAS,IAAI;MAChB,MAAMC,KAAK,GAAGD,IAAI,CAACC,KAAK;MACxBC,cAAc,CAACC,OAAO,CAAC,OAAO,EAAEF,KAAK,CAAC;MACtC,IAAI,CAACX,SAAS,CAACG,IAAI,CAACO,IAAI,CAACU,EAAE,CAAC;MAC5B,IAAI,CAACvB,eAAe,CAACM,IAAI,CAAC,IAAI,CAAC;IACjC,CAAC,CAAC,EACFZ,GAAG,CAAEmB,IAAI,IAAKA,IAAI,CAACU,EAAE,CAAC,CACvB;EACH;;SA3CW1B,WAAW;;mBAAXA,MAAW,EAAA2B,EAAA,CAAAC,QAAA,CAAAC,EAAA,CAAAC,UAAA;AAAA;;SAAX9B,MAAW;EAAA+B,OAAA,EAAX/B,MAAW,CAAAgC,IAAA;EAAAC,UAAA,EADC;AAAM"},"metadata":{},"sourceType":"module","externalDependencies":[]}